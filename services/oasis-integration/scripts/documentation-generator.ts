/**
 * OASIS+ Documentation Generation Module
 */

import * as fs from 'fs';
import * as path from 'path';
import { CONFIG } from './config';
import { DiscoveryResult } from './types';

export class DocumentationGenerator {
  constructor(private result: DiscoveryResult) {}

  async generateDocumentation(): Promise<void> {
    console.log('\nüìö Step 7: Generating Documentation...');

    try {
      // Generate JSON output
      await this.generateJSONOutput();
      
      // Generate Markdown guide
      await this.generateMarkdownGuide();
      
      // Generate TypeScript types
      await this.generateTypeScriptTypes();

      console.log('   ‚úÖ Documentation generation complete');

    } catch (error) {
      console.error('   ‚ùå Documentation generation failed:', error);
      throw error;
    }
  }

  private async generateJSONOutput(): Promise<void> {
    const outputPath = path.join(CONFIG.outputPath, 'oasis-discovery.json');
    const jsonOutput = JSON.stringify(this.result, null, 2);
    
    fs.writeFileSync(outputPath, jsonOutput);
    console.log(`   ‚úì Generated JSON output: ${outputPath}`);
  }

  private async generateMarkdownGuide(): Promise<void> {
    const outputPath = path.join(CONFIG.outputPath, 'OASIS_INTEGRATION_GUIDE.md');
    
    const markdown = `# OASIS+ Integration Guide

**Generated:** ${this.result.timestamp}  
**Base URL:** ${this.result.baseUrl}  
**OASIS Version:** ${this.result.oasisVersion}

## üîê Authentication

- **Login URL:** ${this.result.authentication.loginUrl}
- **Method:** ${this.result.authentication.loginMethod}
- **Credential Fields:** ${this.result.authentication.credentialFields.join(', ')}
- **Session Mechanism:** ${this.result.authentication.sessionMechanism}

## üß≠ Navigation

### Path to Claim Submission
${this.result.navigation.homeToClaimSubmission.map(step => `- ${step}`).join('\n')}

### Breadcrumbs
${this.result.navigation.breadcrumbs.map(crumb => `- ${crumb}`).join('\n')}

## üìÑ Page Structures

### Login Page
- **URL:** ${this.result.pages.login.url}
- **Title:** ${this.result.pages.login.title}
- **Forms:** ${this.result.pages.login.forms.length}
- **Buttons:** ${this.result.pages.login.buttons.length}
- **Links:** ${this.result.pages.login.links.length}

${this.generatePageDetails(this.result.pages.login)}

### Home Page
- **URL:** ${this.result.pages.home.url}
- **Title:** ${this.result.pages.home.title}
- **Forms:** ${this.result.pages.home.forms.length}
- **Buttons:** ${this.result.pages.home.buttons.length}
- **Links:** ${this.result.pages.home.links.length}

${this.generatePageDetails(this.result.pages.home)}

${this.result.pages.claimSubmission ? `
### Claim Submission Page
- **URL:** ${this.result.pages.claimSubmission.url}
- **Title:** ${this.result.pages.claimSubmission.title}
- **Forms:** ${this.result.pages.claimSubmission.forms.length}
- **Buttons:** ${this.result.pages.claimSubmission.buttons.length}
- **Links:** ${this.result.pages.claimSubmission.links.length}

${this.generatePageDetails(this.result.pages.claimSubmission)}
` : ''}

## üîå API Endpoints

${this.result.apiEndpoints.length > 0 ? 
  this.result.apiEndpoints.map(endpoint => `
### ${endpoint.method} ${endpoint.url}
- **Status:** ${endpoint.responseStatus}
- **Timestamp:** ${endpoint.timestamp}
- **Headers:** ${Object.keys(endpoint.headers).length} headers
- **Response Headers:** ${Object.keys(endpoint.responseHeaders).length} headers
`).join('\n') : 
  'No API endpoints captured during discovery.'
}

## üç™ Session Management

${this.result.cookies.length > 0 ? `
**Cookies Found:** ${this.result.cookies.length}

${this.result.cookies.map(cookie => `
- **${cookie.name}**
  - Domain: ${cookie.domain}
  - Path: ${cookie.path}
  - HttpOnly: ${cookie.httpOnly}
  - Secure: ${cookie.secure}
`).join('\n')}
` : 'No cookies captured.'}

## üì∏ Screenshots

${this.result.screenshots.map(screenshot => `- ${screenshot}`).join('\n')}

## ‚ö†Ô∏è Errors and Issues

${this.result.errors.length > 0 ? 
  this.result.errors.map(error => `- ${error}`).join('\n') : 
  'No errors encountered during discovery.'
}

## üöÄ Next Steps

1. **Review Form Fields:** Examine the form structures to understand required data
2. **Test API Endpoints:** Use captured endpoints for integration testing
3. **Implement Authentication:** Use session cookies and authentication flow
4. **Build Integration Service:** Create automated claim submission service
5. **Error Handling:** Implement robust error handling based on discovered patterns

## üìù Notes

- This guide was automatically generated by the OASIS+ Discovery Tool
- Form fields and validation rules may change - verify before implementation
- Test all integrations in a development environment first
- Monitor for changes in the OASIS+ system that may affect integration

---

**Generated by BrainSAIT OASIS+ Discovery Tool**  
**Timestamp:** ${this.result.timestamp}
`;

    fs.writeFileSync(outputPath, markdown);
    console.log(`   ‚úì Generated Markdown guide: ${outputPath}`);
  }

  private generatePageDetails(page: any): string {
    let details = '';

    if (page.forms.length > 0) {
      details += '\n#### Forms\n\n';
      page.forms.forEach((form: any, index: number) => {
        details += `**Form ${index + 1}: ${form.name}**\n`;
        details += `- Action: ${form.action}\n`;
        details += `- Method: ${form.method}\n`;
        details += `- Fields: ${form.fields.length}\n\n`;
        
        if (form.fields.length > 0) {
          details += '| Field | Type | Required | Label |\n';
          details += '|-------|------|----------|-------|\n';
          form.fields.forEach((field: any) => {
            details += `| ${field.name} | ${field.type} | ${field.required ? 'Yes' : 'No'} | ${field.label} |\n`;
          });
          details += '\n';
        }
      });
    }

    if (page.buttons.length > 0) {
      details += '\n#### Buttons\n\n';
      details += '| Text | ID | Type | Disabled |\n';
      details += '|------|----|----- |---------|\n';
      page.buttons.forEach((button: any) => {
        details += `| ${button.text} | ${button.id} | ${button.type} | ${button.disabled ? 'Yes' : 'No'} |\n`;
      });
      details += '\n';
    }

    if (page.links.length > 0) {
      details += '\n#### Important Links\n\n';
      page.links.slice(0, 10).forEach((link: any) => {
        details += `- [${link.text}](${link.href})\n`;
      });
      details += '\n';
    }

    return details;
  }

  private async generateTypeScriptTypes(): Promise<void> {
    const outputPath = path.join(CONFIG.outputPath, 'oasis-types.ts');
    
    const types = `/**
 * OASIS+ Integration Types
 * Generated from discovery on ${this.result.timestamp}
 */

export interface OASISCredentials {
  username: string;
  password: string;
}

export interface OASISSession {
  cookies: Array<{
    name: string;
    value: string;
    domain: string;
    path: string;
  }>;
  baseUrl: string;
  loginUrl: string;
}

${this.generateFormTypes()}

export interface OASISClient {
  authenticate(credentials: OASISCredentials): Promise<OASISSession>;
  submitClaim(claimData: any): Promise<any>;
  searchClaims(criteria: any): Promise<any>;
  logout(): Promise<void>;
}
`;

    fs.writeFileSync(outputPath, types);
    console.log(`   ‚úì Generated TypeScript types: ${outputPath}`);
  }

  private generateFormTypes(): string {
    let types = '';
    
    // Generate types for each form found
    this.result.pages.login.forms.forEach((form, index) => {
      if (form.fields.length > 0) {
        types += `\nexport interface LoginForm${index > 0 ? index + 1 : ''} {\n`;
        form.fields.forEach(field => {
          const optional = field.required ? '' : '?';
          const type = this.getTypeScriptType(field.type);
          types += `  ${field.name}${optional}: ${type};\n`;
        });
        types += '}\n';
      }
    });

    if (this.result.pages.claimSubmission) {
      this.result.pages.claimSubmission.forms.forEach((form, index) => {
        if (form.fields.length > 0) {
          types += `\nexport interface ClaimSubmissionForm${index > 0 ? index + 1 : ''} {\n`;
          form.fields.forEach(field => {
            const optional = field.required ? '' : '?';
            const type = this.getTypeScriptType(field.type);
            types += `  ${field.name}${optional}: ${type};\n`;
          });
          types += '}\n';
        }
      });
    }

    return types;
  }

  private getTypeScriptType(htmlType: string): string {
    switch (htmlType.toLowerCase()) {
      case 'number':
      case 'range':
        return 'number';
      case 'checkbox':
        return 'boolean';
      case 'date':
      case 'datetime-local':
      case 'time':
        return 'Date | string';
      case 'email':
      case 'tel':
      case 'url':
      case 'text':
      case 'password':
      case 'textarea':
      case 'select':
      default:
        return 'string';
    }
  }
}