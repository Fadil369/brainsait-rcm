name: BrainSAIT CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  # ============================================================================
  # LINTING & CODE QUALITY
  # ============================================================================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install ruff mypy

      - name: Lint TypeScript/JavaScript
        run: npm run lint

      - name: Lint Python
        run: |
          ruff check apps/api services
          ruff format --check apps/api services

  # ============================================================================
  # PYTHON API TESTS
  # ============================================================================
  test-api:
    name: Test API
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test

      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd apps/api
          pip install -r requirements.txt

      - name: Run tests
        env:
          DATABASE_URL: mongodb://test:test@localhost:27017/brainsait_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd apps/api
          pytest tests/ -v --cov=. --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/api/coverage.xml
          flags: api

  # ============================================================================
  # FRONTEND TESTS
  # ============================================================================
  test-web:
    name: Test Web App
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: npm run build --workspace=apps/web

      - name: Run tests
        run: npm test --workspace=apps/web

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ============================================================================
  # BUILD DOCKER IMAGES
  # ============================================================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-api, test-web]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: ${{ github.event_name != 'pull_request' }}
          tags: brainsait/api:${{ github.sha }},brainsait/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          push: ${{ github.event_name != 'pull_request' }}
          tags: brainsait/web:${{ github.sha }},brainsait/web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # e.g., kubectl, helm, or cloud provider CLI

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

      - name: Notify Sentry of deployment
        run: |
          if [ -n "${{ secrets.SENTRY_AUTH_TOKEN }}" ]; then
            curl -sL https://sentry.io/get-cli/ | sh
            sentry-cli releases new ${{ github.sha }}
            sentry-cli releases set-commits ${{ github.sha }} --auto
            sentry-cli releases finalize ${{ github.sha }}
            sentry-cli releases deploys ${{ github.sha }} new -e production
          fi